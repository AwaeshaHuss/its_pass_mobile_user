// Mocks generated by Mockito 5.4.6 from annotations
// in uber_users_app/test/features/authentication/presentation/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:uber_users_app/core/errors/failures.dart' as _i5;
import 'package:uber_users_app/features/authentication/domain/entities/user_entity.dart'
    as _i7;
import 'package:uber_users_app/features/authentication/domain/usecases/get_user_data.dart'
    as _i9;
import 'package:uber_users_app/features/authentication/domain/usecases/save_user_data.dart'
    as _i8;
import 'package:uber_users_app/features/authentication/domain/usecases/sign_in_with_phone.dart'
    as _i3;
import 'package:uber_users_app/features/authentication/domain/usecases/verify_otp.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SignInWithPhone].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInWithPhone extends _i1.Mock implements _i3.SignInWithPhone {
  MockSignInWithPhone() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(
          {required String? phoneNumber}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#phoneNumber: phoneNumber},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [],
            {#phoneNumber: phoneNumber},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [VerifyOTP].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerifyOTP extends _i1.Mock implements _i6.VerifyOTP {
  MockVerifyOTP() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.UserEntity>> call({
    required String? verificationId,
    required String? smsCode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #verificationId: verificationId,
            #smsCode: smsCode,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.UserEntity>>.value(
            _FakeEither_0<_i5.Failure, _i7.UserEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #verificationId: verificationId,
              #smsCode: smsCode,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.UserEntity>>);
}

/// A class which mocks [SaveUserData].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveUserData extends _i1.Mock implements _i8.SaveUserData {
  MockSaveUserData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call(
          {required _i7.UserEntity? user}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#user: user},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [],
            {#user: user},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [GetUserData].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserData extends _i1.Mock implements _i9.GetUserData {
  MockGetUserData() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.UserEntity>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i7.UserEntity>>.value(
            _FakeEither_0<_i5.Failure, _i7.UserEntity>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i7.UserEntity>>);
}
